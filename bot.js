const TelegramBot = require('node-telegram-bot-api');
const mysql = require('mysql2/promise');
const bcrypt = require('bcrypt');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
    host: 'localhost',
    user: 'todo_user',
    password: '1234',
    database: 'todolist',
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
};

// –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
const pool = mysql.createPool(dbConfig);

// –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞
const TOKEN = '8137640522:AAEH-Ro6cZv3T5N0qFXAOBX2yM5m1RLXgwI';
const bot = new TelegramBot(TOKEN, {
    polling: true,
    request: {
        timeout: 10000
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
async function getUserByTelegramId(telegramId) {
    let connection;
    try {
        connection = await pool.getConnection();
        const [rows] = await connection.query(
            'SELECT id, username FROM users WHERE telegram_id = ?',
            [telegramId]
        );
        return rows[0] || null;
    } catch (error) {
        console.error('Database error in getUserByTelegramId:', error);
        throw error;
    } finally {
        if (connection) connection.release();
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    const text = msg.text;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
    if (!text || !text.startsWith('/')) {
        return;
    }

    try {
        // –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏
        const parts = text.split(' ').filter(p => p.trim());
        const command = parts[0].toLowerCase();
        const args = parts.slice(1);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        switch (command) {
            case '/start':
                await handleStart(chatId);
                break;

            case '/link':
                if (args.length < 2) {
                    await bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω: /link <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>');
                    return;
                }
                await handleLink(chatId, telegramId, args[0], args[1]);
                break;

            case '/list':
                await handleList(chatId, telegramId);
                break;

            case '/add':
                if (args.length < 1) {
                    await bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω: /add <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏>');
                    return;
                }
                await handleAdd(chatId, telegramId, args.join(' '));
                break;

            case '/delete':
                if (args.length < 1 || isNaN(args[0])) {
                    await bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω: /delete <ID –∑–∞–¥–∞—á–∏>');
                    return;
                }
                await handleDelete(chatId, telegramId, parseInt(args[0]));
                break;

            case '/edit':
                if (args.length < 2 || isNaN(args[0])) {
                    await bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω: /edit <ID> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>');
                    return;
                }
                await handleEdit(chatId, telegramId, parseInt(args[0]), args.slice(1).join(' '));
                break;

            default:
                await bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
                '/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n' +
                '/link - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n' +
                '/list - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏\n' +
                '/add - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n' +
                '/delete - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n' +
                '/edit - –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É');
        }
    } catch (error) {
        console.error('Error handling message:', error);
        await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async function handleStart(chatId) {
    await bot.sendMessage(
        chatId,
        `üìù To-Do List Bot\n\n` +
        `–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏.\n\n` +
        `–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç:\n` +
        `/link <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>\n\n` +
        `–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n` +
        `/list - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏\n` +
        `/add <—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n` +
        `/delete <ID> - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n` +
        `/edit <ID> <—Ç–µ–∫—Å—Ç> - –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É`
    );
}

async function handleLink(chatId, telegramId, username, password) {
    let connection;
    try {
        connection = await pool.getConnection();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const [users] = await connection.query(
            'SELECT id, password_hash FROM users WHERE username = ?',
            [username]
        );

        if (users.length === 0) {
            await bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω.');
            return;
        }

        const user = users[0];
        const isValid = await bcrypt.compare(password, user.password_hash);

        if (!isValid) {
            await bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            return;
        }

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID
        await connection.query(
            'UPDATE users SET telegram_id = ? WHERE id = ?',
            [telegramId, user.id]
        );

        await bot.sendMessage(
            chatId,
            '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n' +
            '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏:\n' +
            '/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n' +
            '/add [—Ç–µ–∫—Å—Ç] - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n' +
            '/delete [ID] - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n' +
            '/edit [ID] [—Ç–µ–∫—Å—Ç] - –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É'
        );
    } catch (error) {
        console.error('Error in link command:', error);
        if (error.code === 'ER_DUP_ENTRY') {
            await bot.sendMessage(chatId, '–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω.');
        } else {
            throw error;
        }
    } finally {
        if (connection) connection.release();
    }
}

async function handleList(chatId, telegramId) {
    const user = await getUserByTelegramId(telegramId);
    if (!user) {
        await bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /link');
        return;
    }

    let connection;
    try {
        connection = await pool.getConnection();
        const [tasks] = await connection.query(
            'SELECT id, text FROM items WHERE user_id = ? ORDER BY created_at DESC',
            [user.id]
        );

        if (tasks.length === 0) {
            await bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–æ–π /add');
            return;
        }

        const tasksList = tasks.map(task => `#${task.id}: ${task.text}`).join('\n\n');
        await bot.sendMessage(
            chatId,
            `–í–∞—à–∏ –∑–∞–¥–∞—á–∏ (${tasks.length}):\n\n${tasksList}`
        );
    } catch (error) {
        console.error('Error in list command:', error);
        throw error;
    } finally {
        if (connection) connection.release();
    }
}

async function handleAdd(chatId, telegramId, text) {
    const user = await getUserByTelegramId(telegramId);
    if (!user) {
        await bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /link');
        return;
    }

    if (!text || text.trim().length === 0) {
        await bot.sendMessage(chatId, '–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        return;
    }

    let connection;
    try {
        connection = await pool.getConnection();
        await connection.query(
            'INSERT INTO items (text, user_id) VALUES (?, ?)',
                               [text.trim(), user.id]
        );

        await bot.sendMessage(
            chatId,
            `–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"${text.trim()}"`
        );
    } catch (error) {
        console.error('Error in add command:', error);
        throw error;
    } finally {
        if (connection) connection.release();
    }
}

async function handleDelete(chatId, telegramId, taskId) {
    const user = await getUserByTelegramId(telegramId);
    if (!user) {
        await bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /link');
        return;
    }

    let connection;
    try {
        connection = await pool.getConnection();
        const [result] = await connection.query(
            'DELETE FROM items WHERE id = ? AND user_id = ?',
            [taskId, user.id]
        );

        if (result.affectedRows > 0) {
            await bot.sendMessage(chatId, `–ó–∞–¥–∞—á–∞ #${taskId} —É–¥–∞–ª–µ–Ω–∞`);
        } else {
            await bot.sendMessage(chatId, `–ó–∞–¥–∞—á–∞ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
    } catch (error) {
        console.error('Error in delete command:', error);
        throw error;
    } finally {
        if (connection) connection.release();
    }
}


async function handleEdit(chatId, telegramId, taskId, newText) {
    const user = await getUserByTelegramId(telegramId);
    if (!user) {
        await bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /link');
        return;
    }

    if (!newText || newText.trim().length === 0) {
        await bot.sendMessage(chatId, '–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        return;
    }

    let connection;
           try {
            connection = await pool.getConnection();
            const [rows] = await connection.execute(
                'SELECT * FROM users WHERE telegram_id = ?',
                [userId]
            );
            const user = rows[0];

            if (!user) {
                await bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.');
                return;
            }

            const [result] = await connection.execute(
                'UPDATE tasks SET description = ? WHERE id = ? AND user_id = ?',
                [newText.trim(), taskId, user.id]
            );

            if (result.affectedRows > 0) {
                await bot.sendMessage(chatId, `–ó–∞–¥–∞—á–∞ #${taskId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n"${newText.trim()}"`);
            } else {
                await bot.sendMessage(chatId, `–ó–∞–¥–∞—á–∞ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ—ë –∞–≤—Ç–æ—Ä–æ–º.`);
            }
        } catch (error) {
            console.error('Error in edit command:', error);
        } finally {
            if (connection) connection.release();
        }
    };

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

process.on('unhandledRejection', (error) => {
    console.error('Unhandled rejection:', error);
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω - –≤–≤–æ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã');
